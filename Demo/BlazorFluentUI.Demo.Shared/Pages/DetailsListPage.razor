@page "/detailsListPage"

@using DynamicData 
@using DynamicData.Binding 
@using System.Collections.ObjectModel
@using System.Reactive.Linq
@using System.Reactive.Subjects

    <BFUStack Style="height:100%;">
        <h3>DetailsList</h3>
        <BFUTextField Label="Filter Description"
                   @bind-Value=@dataContainer.Filter
                   @bind-Value:event="OnInput"/>

        <BFUDetailsList ItemsSource="ReadonlyList"
                     Columns="ReadonlyColumns"
                     LayoutMode="DetailsListLayoutMode.Justified"
                     @bind-Selection="selection"
                     SelectionMode="SelectionMode.Multiple">

        </BFUDetailsList>
    </BFUStack>

@code {

    Selection<DataItem> selection = new Selection<DataItem>();

    SourceCache<DataItem, string> dataSource = new SourceCache<DataItem, string>(x => x.Key);
    public ReadOnlyObservableCollection<DataItem> ReadonlyList;
    int count = 0;

    SourceCache<BFUDetailsRowColumn<DataItem>, string> columnsSource = new SourceCache<BFUDetailsRowColumn<DataItem>, string>(x => x.Key);
    public ReadOnlyObservableCollection<BFUDetailsRowColumn<DataItem>> ReadonlyColumns;



    ObservableDataContainer dataContainer = new ObservableDataContainer();

    class ObservableDataContainer : AbstractNotifyPropertyChanged
    {
        private string filter = "";
        public string Filter { get => filter; set => SetAndRaise(ref filter, value); }



        private bool descending = false;
        public bool Descending { get => descending; set => SetAndRaise(ref descending, value); }

        private Func<DataItem, IComparable> sortSelector = x=>x.KeyNumber;
        public Func<DataItem, IComparable> SortSelector { get => sortSelector; set => SetAndRaise(ref sortSelector, value); }

        public IObservable<Func<DataItem, bool>> DynamicDescriptionFilter { get; private set; }

        public IObservable<SortExpressionComparer<DataItem>> DynamicSortExpression { get; private set; }

        public IObservable<bool> IsFiltered { get; private set; }

        public ObservableDataContainer()
        {
            DynamicDescriptionFilter = this.WhenValueChanged(@this => @this.Filter)
                .Throttle(TimeSpan.FromMilliseconds(250))
                .Select<string, Func<DataItem, bool>>(f => item => item.Description.Contains(f));

            DynamicSortExpression = this.WhenValueChanged(@this => @this.SortSelector).CombineLatest(this.WhenValueChanged(@this => @this.Descending), (selector, isDescending) =>
            {

                if (isDescending)
                {
                    return SortExpressionComparer<DataItem>.Descending(selector);
                }
                else
                {
                    return SortExpressionComparer<DataItem>.Ascending(selector);
                }
            });

            IsFiltered = this.WhenValueChanged(@this => @this.Filter).Select(x => !string.IsNullOrWhiteSpace(x));
        }
    }


    protected override void OnInitialized()
    {
        columnsSource.AddOrUpdate(new BFUDetailsRowColumn<DataItem>("Key", x => x.KeyNumber) { MaxWidth = 70, Index=0, OnColumnClick = this.OnColumnClick });
        columnsSource.AddOrUpdate(new BFUDetailsRowColumn<DataItem>("Name", x => x.DisplayName) { Index = 1, MaxWidth = 150, OnColumnClick = this.OnColumnClick, IsResizable=true });
        var descColumn = new BFUDetailsRowColumn<DataItem>("Description", x => x.Description) { Index = 2, OnColumnClick = this.OnColumnClick };
        columnsSource.AddOrUpdate(descColumn);

        for (var i = 0; i < 1000; i++)
        {
            count++;
            dataSource.AddOrUpdate(new DataItem(count));
        }

        dataContainer.IsFiltered.Subscribe(isFiltered =>
        {
            descColumn.IsFiltered = isFiltered;
            columnsSource.AddOrUpdate(descColumn);
        });

        dataSource.Connect()
                .Filter(dataContainer.DynamicDescriptionFilter)
                .Sort(dataContainer.DynamicSortExpression)
                .Bind(out ReadonlyList)
                .Subscribe();

        columnsSource.Connect()
            .Sort(SortExpressionComparer<BFUDetailsRowColumn<DataItem>>.Ascending(x=>x.Index))
            .Bind(out ReadonlyColumns)
            .Do(_ => StateHasChanged())  //when a column is clicked, that column's details will update... but other columns won't.  Need to call StateHasChanged to redraw all.
            .Subscribe();



        base.OnInitialized();
    }

    private void OnColumnClick(BFUDetailsRowColumn<DataItem> column)
    {
        if (column.IsSorted)
        {
            column.IsSortedDescending = !column.IsSortedDescending;
            dataContainer.Descending = column.IsSortedDescending;
            dataContainer.SortSelector = column.FieldSelector;
            columnsSource.AddOrUpdate(column);
        }
        else
        {
            var copyList = columnsSource.Items.ToList();
            foreach (var col in copyList)
            {
                col.IsSorted = false;
                if (col == column)
                {
                    col.IsSorted = true;
                    col.IsSortedDescending = false;
                }
            }
            columnsSource.AddOrUpdate(copyList);
        }
        dataContainer.Descending = column.IsSortedDescending;
        dataContainer.SortSelector = column.FieldSelector;

    }


}
