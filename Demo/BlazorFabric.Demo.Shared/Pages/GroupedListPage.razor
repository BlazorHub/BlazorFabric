@page "/groupedListPage"
@using DynamicData


    <Stack Style="height:calc(100% - 0px);">
        <Toggle OffText="Normal" OnText="Compact" Label="Enable compact mode" @bind-Checked="isCompact" />
        <BlazorFabric.Label>Grouped List</BlazorFabric.Label>


        <SelectionZone @bind-Selection=@selection
                       SelectionMode=@SelectionMode.Multiple>
            <FocusZone Direction="FocusZoneDirection.Vertical"
                       Style="height:100%;overflow-y:hidden;">
                <BlazorFabric.GroupedList ItemsSource=@groupedData
                                          Compact=@isCompact
                                          TItem="GroupedDataItem"
                                          GroupTitleSelector=@(x=>x.DisplayName)
                                          SubGroupSelector=@(x=>x.Data)
                                          Selection=@selection
                                          SelectionMode=@SelectionMode.Multiple>
                    <ItemTemplate>
                        <DetailsRow Item=@context.Item
                                    ItemIndex=@context.Index
                                    Columns=@columns
                                    Compact=@isCompact
                                    GroupNestingDepth=@context.Depth
                                    Selection=@selection
                                    SelectionMode=@SelectionMode.Multiple />
                    </ItemTemplate>
                </BlazorFabric.GroupedList>
            </FocusZone>
        </SelectionZone>
    </Stack>

@code {
    string DebugText = "";
    bool isCompact;
    int count = 0;
    //GroupedDataItem rootGroup;
    System.Collections.Generic.List<DataItem> data;
    System.Collections.Generic.List<GroupedDataItem> groupedData;
    Selection<GroupedDataItem> selection = new Selection<GroupedDataItem>();

    System.Collections.Generic.List<DetailsRowColumn<GroupedDataItem>> columns;

    protected override Task OnInitializedAsync()
    {
        columns = new System.Collections.Generic.List<DetailsRowColumn<GroupedDataItem>>();
        columns.Add(new DetailsRowColumn<GroupedDataItem> { FieldSelector = x => x.Key, Name = "Key", MinWidth=60 });
        columns.Add(new DetailsRowColumn<GroupedDataItem> { FieldSelector = x => x.DisplayName, Name = "Name" });
        columns.Add(new DetailsRowColumn<GroupedDataItem> { FieldSelector = x => x.Description, Name = "Description" });

        data = new System.Collections.Generic.List<DataItem>();

        for (var i = 0; i < 100; i++)
        {
            count++;
            data.Add(new DataItem(count));
        }

        groupedData = data.GroupBy(x =>
        {
            var number = int.Parse(x.Key);
            int group = (number - 1) / 10;
            return group;
        }).Select(x =>
        {
            var subGroup = new GroupedDataItem(x);
            subGroup.Data = subGroup.Data.GroupBy(y =>
            {
                var number = int.Parse(y.Key);
                int group = (number - 1) / 5;
                return group;
            }).Select(y =>
            {
                var subSubGroup = new GroupedDataItem(y);
                return subSubGroup;
            }).ToList();

            return subGroup;
        }).ToList();

        //groupedData.Add(new GroupedDataItem(new DataItem("TEST!") ) );
        //rootGroup = new GroupedDataItem(new DataItem("root"));
        //rootGroup.Data = groupedData;

        return Task.CompletedTask;
    }
}
