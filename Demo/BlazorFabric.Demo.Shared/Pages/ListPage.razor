@page "/listPage"
@using System.Linq 


    @*<DefaultButton OnClick=@(_=> basicList1.ScrollToIndexAsync(2700) ) 
                   Text="Scroll to item 2700"/>*@
    @*<div style="display:flex; flex-direction:column; height: calc(100vh - 73.5px);">
        <div style="display:flex;flex-direction:column;flex-grow:1;height:100%;">*@
    <Stack Style="height:100%;">
        <div style="height:20px;">
            @DebugText
        </div>

        <Dropdown ItemsSource="(Enum.GetValues(typeof(SelectionMode)).Cast<SelectionMode>().ToList())"
                  @bind-SelectedKey=SelectedMode
                  Style="max-width:300px;">
            <ItemTemplate>
                <DropdownItem TItem="SelectionMode"
                              ItemKey=@context.ToString()
                              Text=@context.ToString() />
            </ItemTemplate>
        </Dropdown>

        <BlazorFabric.PrimaryButton Text="Add 10 items" OnClick="@ClickHandler" />
        <BlazorFabric.PrimaryButton Text="Add 5000 items" OnClick="@ClickHandler2" />

        <BlazorFabric.Label>Virtualized List with selection modes</BlazorFabric.Label>
        
        
        <SelectionZone SelectionMode=@((SelectionMode)Enum.Parse(typeof(SelectionMode), SelectedMode))
                       @bind-Selection="selection"
                       @ref="selectionZone">
            <FocusZone Style="height:100%;overflow-y:hidden;">
                <BlazorFabric.List ItemsSource=@data
                                   TItem="DataItem">
                    <ItemTemplate>

                        <div style="display:flex; flex-direction:row;" 
                             class=@($"ms-List-cell-default{(selection.SelectedItems.Contains(context.Item)?" is-selected":"")}")
                             data-is-focusable="true"
                             @onclick=@(()=> {
                                            selectionZone.HandleClick(context.Item, context.Index);
                                            DebugText = context.Item.Key + " clicked";
                                        })>
                            <img height="25" width="25" src=@context.Item.ImgUrl />
                            <em>This is item #@context.Item.Key.</em>
                            <span style="margin-left:10px;">@context.Item.DisplayName</span>
                        </div>
                    </ItemTemplate>
                </BlazorFabric.List>

            </FocusZone>
        </SelectionZone>
    </Stack> 

@code {
    int count = 0;
    System.Collections.ObjectModel.ObservableCollection<DataItem> data;
    string DebugText = "";
    string SelectedMode = SelectionMode.Single.ToString();
    Selection<DataItem> selection = new Selection<DataItem>();
    SelectionZone<DataItem> selectionZone;

    Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        System.Diagnostics.Debug.WriteLine("Clicked!");
        for (var i = 0; i < 10; i++)
        {
            count++;
            data.Add(new DataItem(count));
        }
        System.Diagnostics.Debug.WriteLine($"List has {data.Count} items.");
        return Task.CompletedTask;
    }

    Task ClickHandler2(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        //var tempData = new System.Collections.Generic.List<DataItem>();
        System.Diagnostics.Debug.WriteLine("Clicked!");
        for (var i = 0; i < 5000; i++)
        {
            count++;

            data.Add(new DataItem(count));
        }
        //data = new System.Collections.ObjectModel.ObservableCollection<DataItem>(tempData);
        System.Diagnostics.Debug.WriteLine($"List has {data.Count} items.");
        return Task.CompletedTask;
    }

    Task ClickHandler3(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        System.Diagnostics.Debug.WriteLine("Clicked!");
        for (var i = 0; i < 2; i++)
        {
            count++;
            data.Add(new DataItem(count));
        }
        System.Diagnostics.Debug.WriteLine($"List has {data.Count} items.");
        return Task.CompletedTask;
    }

    protected override Task OnInitializedAsync()
    {
        data = new System.Collections.ObjectModel.ObservableCollection<DataItem>();
        //for (var i = 0; i < 10; i++)
        //{
        //    count++;
        //    data.Add(new DataItem(i));
        //}

        return Task.CompletedTask;
    }


}
