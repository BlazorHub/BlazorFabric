@page "/listPage"

@using Models

    <div style="display:flex; flex-direction:column; height: calc(100vh - 53.5px);">
        <div style="display:flex;flex-direction:column;flex-grow:1;height:100%;">
            <BlazorFabric.Label>Virtualized List with selection modes</BlazorFabric.Label>
            <BlazorFabric.PrimaryButton Text="Add 2 items" OnClick="@ClickHandler3" />
            <BlazorFabric.PrimaryButton Text="Add 10 more items" OnClick="@ClickHandler" />
            <BlazorFabric.PrimaryButton Text="Add 5000 more items" OnClick="@ClickHandler2" />
            <div style="overflow:hidden;flex-grow:1;">
                <BlazorFabric.List ItemsSource=@data TItem="DataItem">
                    <ItemTemplate>
                        <Stack Horizontal="true" Tokens="new StackTokens { ChildrenGap = new double[] { 10.0 } }">
                            <Image Src=@context.ImgUrl ImageFit="ImageFit.CenterContain" Width="50" Height="50"/>
                            <Text Variant="TextType.Large" Block="true">
                                This is item #@(context.DisplayName).
                            </Text>
                        </Stack>
                        @*<div style="display:flex; flex-direction:row; ">
                            <img height="50" width="50" src=@context.ImgUrl />
                            <em>@context.DisplayName</em>
                        </div>*@
                    </ItemTemplate>
                </BlazorFabric.List>
            </div>
        </div>
    </div>
@code {
    int count = 0;
    System.Collections.ObjectModel.ObservableCollection<DataItem> data;

    Task ClickHandler(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        System.Diagnostics.Debug.WriteLine("Clicked!");
        for (var i = 0; i < 10; i++)
        {
            count++;
            data.Add(new DataItem(count));
        }
        System.Diagnostics.Debug.WriteLine($"List has {data.Count} items.");
        return Task.CompletedTask;
    }

     Task ClickHandler2(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        System.Diagnostics.Debug.WriteLine("Clicked!");
        for (var i = 0; i < 5000; i++)
        {
            count++;
            data.Add(new DataItem(count));
        }
        System.Diagnostics.Debug.WriteLine($"List has {data.Count} items.");
        return Task.CompletedTask;
    }

 Task ClickHandler3(Microsoft.AspNetCore.Components.Web.MouseEventArgs args)
    {
        System.Diagnostics.Debug.WriteLine("Clicked!");
        for (var i = 0; i < 2; i++)
        {
            count++;
            data.Add(new DataItem(count));
        }
        System.Diagnostics.Debug.WriteLine($"List has {data.Count} items.");
        return Task.CompletedTask;
    }

    protected override Task OnInitializedAsync()
    {
        data = new System.Collections.ObjectModel.ObservableCollection<DataItem>();
        //for (var i = 0; i < 10; i++)
        //{
        //    count++;
        //    data.Add(new DataItem(i));
        //}

        return Task.CompletedTask;
    }
}
