@using System.Reactive.Subjects
@using System.Reactive.Linq
@using Microsoft.JSInterop
@namespace BlazorFabric
@using Microsoft.AspNetCore.Components.Web

@inherits FabricComponentBase

@typeparam TItem

@inject IJSRuntime JSRuntime

<div @ref="RootElementReference" role="presentation" class="ms-List-page">
    @{
        var index = StartIndex;
        foreach (var item in this.ItemsSource)
        {
            <ListItem IndexPosition=@index Item=@item ItemClicked=@ItemClicked IsActive=@(this.SelectedItems.Contains(item)) ItemFocusable=@ItemFocusable>
                @ItemTemplate(item)
            </ListItem>
            index++;
        }
    }
</div>

@code {
    public double Width { get; set; }
    public double Height { get; set; }


    [Parameter] public Func<object, MouseEventArgs, Task> ItemClicked { get; set; }
    [Parameter] public IEnumerable<TItem> ItemsSource { get; set; }
    [Parameter] public RenderFragment<TItem> ItemTemplate { get; set; }
    [Parameter] public ISubject<(int index, double height)> PageMeasureSubject { get; set; }
    [Parameter] public IEnumerable<TItem> SelectedItems { get; set; }
    [Parameter] public int StartIndex { get; set; }
    [Parameter] public bool ItemFocusable { get; set; }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        var rect = await JSRuntime.InvokeAsync<JSRect>("BlazorFabricList.measureElementRect", RootElementReference);
        this.Width = rect.width; // result["width"];
        this.Height = rect.height;//,10); // result["height"];

        this.PageMeasureSubject.OnNext((this.StartIndex, this.Height));
        await base.OnAfterRenderAsync(firstRender);
    }
}