@namespace BlazorFabric
@inherits FabricComponentBase

<div class="ms-Callout-container" @ref="RootElementReference" style=@($"{(this.Hidden ? "visibility: hidden;" : "" )}")>
    <div class=@($"ms-Callout mediumFont {GetAnimationStyle()} {CalloutPosition.TargetEdge.ToString()} {ClassName}")
         @ref="calloutReference"
         style=@($"{CalloutPosition.ElementRectangle.GetStyle()} {(CalloutWidth > 0 ? "width: " + CalloutWidth + "px":"")} {(CalloutMaxWidth > 0?"maxWidth: " + CalloutMaxWidth + "px": "" )}")
         tabindex="-1">
        @if (this.IsBeakVisible)
        {
            <div class="ms-Callout-beak" style=@($"{CalloutPosition.BeakPosition.ElementRectangle.GetStyle()} width:{BeakWidth}px; height:{BeakWidth}px; {(BackgroundColor != null ? "background-color:"+BackgroundColor+";" : "" )}") />
            <div class="ms-Callout-beakCurtain" />
        }
        <BlazorFabric.Popup AriaLabel=@AriaLabel
                            AriaDescribedBy=@AriaDescribedBy
                            AriaLabelledBy=@AriaLabelledBy
                            ClassName="ms-Callout-main"
                            ShouldRestoreFocus="true"
                            OnDismiss=@OnDismiss

                            Style=@($"max-height: {contentMaxHeight}px;{(overflowYHidden ? "overflow-y: hidden;" : "")} {(BackgroundColor != null ? "background-color:"+BackgroundColor+";" : "")}")>
            @ChildContent
        </BlazorFabric.Popup>
    </div>
</div>

